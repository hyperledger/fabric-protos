name: Go Bindings

on:
  push:
    branches: [ main ]
    tags: [ v** ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  ci_checks:
    name: Build checks
    uses: ./.github/workflows/ci-checks.yml

  build:
    name: Build Go bindings
    needs: ci_checks
    runs-on: ubuntu-latest

    steps:
    - name: Checkout (build)
      uses: actions/checkout@v3
      with:
        path: build

    # - name: Checkout (publish apiv2)
    #   uses: actions/checkout@v3
    #   with:
    #     repository: hyperledger/fabric-protos-go-apiv2
    #     path: publish-apiv2

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.16.7

    - name: Run make
      run: |
        PROTOC_VER=1.3.2

        # create temp directory to clone and build correct version of the tooling
        prefix=$(basename "$0")
        tempdir=$(mktemp -d -t "$prefix.XXXXXXXX") || error_exit "Error creating temporary directory"

        pushd ${tempdir}
        git clone -q -c advice.detachedHead=false -b v${PROTOC_VER} --depth 1 https://github.com/golang/protobuf

        cd protobuf
        go install ./protoc-gen-go

        popd

        # The up-to-date tool to use to generate the code is 
        #	protoc --go_out=bindings/go --go_opt=paths=source_relative --go-grpc_out=bindings/go --go-grpc_opt=paths=source_relative "$protos"/*.proto
        #
        # Using tooling 'of the period' the following is used
        for protos in $(find . -name '*.proto' -exec dirname {} \; | sort -u); do
            protoc "--go_out=plugins=grpc,paths=source_relative:bindings/go" "$protos"/*.proto
        done

        rm -Rf "$tempdir"
      working-directory: build

    - name: Get commit message
      run: echo "::set-output name=COMMIT_MESSAGE::$(git log --format=%B -n 1 $GITHUB_SHA)"
      id: get-commit-message
      working-directory: build

    # - name: Create apiv2 publish commit
    #   run: |
    #     git config --global user.email "hyperledger-bot@hyperledger.org"
    #     git config --global user.name "hyperledger-bot"
    #     cp -a ../build/bindings/go-apiv2/. .
    #     git add -A
    #     git diff --cached --quiet || git commit -m "$COMMIT_MESSAGE" --no-edit
    #     git status
    #     git log --name-status
    #   working-directory: publish-apiv2
    #   env:
    #     COMMIT_MESSAGE: ${{ steps.get-commit-message.outputs.COMMIT_MESSAGE }}

    # - name: Push GitHub apiv2 publish commit
    #   run: |
    #     ../build/.github/scripts/installDeployKey.sh fabric-protos-go-apiv2 ${{ secrets.PUBLISH_GO_V2 }}
    #     touch "${HOME}/.ssh/known_hosts"
    #     ssh-keyscan -H github.com >> "${HOME}/.ssh/known_hosts"
    #     git remote set-url origin https://x-access-token:${{ secrets.PUBLISH_GO_V2 }}@github.com/hyperledger/fabric-protos-go-apiv2.git
    #     git push origin
    #   if: github.ref == 'refs/heads/main'
    #   working-directory: publish-apiv2

    # - name: Tag apiv2 commit
    #   run: |
    #     git tag v${BINDING_VERSION}
    #     git remote set-url origin https://x-access-token:${{ secrets.PUBLISH_GO_V2 }}@github.com/hyperledger/fabric-protos-go-apiv2.git
    #     git push origin v${BINDING_VERSION}
    #   if: needs.ci_checks.outputs.publish_release == 'true'
    #   working-directory: publish-apiv2
    #   env:
    #     BINDING_VERSION: ${{ needs.ci_checks.outputs.binding_version }}
